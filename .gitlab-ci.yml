include:
  - project: TankerHQ/gitlab-ci-files
    ref: 2023-08-09-267
    file: /common.yml

variables:
  SDK_NATIVE_CONAN_REFERENCE: tanker/latest-stable@
  GIT_DEPTH: 1

############
# Workflow #
############

workflow:
  rules:
    # web pipelines for releases only
    - if: $CI_PIPELINE_SOURCE == "web" && $SDK_IOS_RELEASE_VERSION !~ /\A\d+\.\d+\.\d+(-(alpha|beta)\d+)?\z/
      when: never
    - if: !reference [.if-invalid-native-conan-reference, if]
      when: never
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        CONAN_REMOTE: "artifactory"
    - if: '$CI_MERGE_REQUEST_TITLE =~ /.*\[preview].*/'
      variables:
        CONAN_REMOTE: "artifactory-preview"
    - when: always
      variables:
        CONAN_REMOTE: "artifactory-staging"

###########
# Default #
###########

default:
  before_script: &global_before_script
    - security unlock-keychain -p ${DEFAULT_KEYCHAIN_PASSWORD} ~/Library/Keychains/login.keychain-db
    - poetry run python -m pip install --upgrade pip
    - poetry install

##########
# Stages #
##########

stages:
  - check
  - bridge-check
  - deploy

#############################
# Default settings override #
#############################

.before-script/download-artifacts:
  before_script:
    - *global_before_script
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME
    - poetry run python run-ci.py reset-branch $(cat branch_name.txt)
    - poetry run python -m pip install --upgrade pip
    - poetry install

.rules/check/deployed-native:
  rules:
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/mr/manual, rules]

.check/deployed-native:
  stage: check
  extends:
    - .rules/check/deployed-native
  script:
    - poetry run python run-ci.py --remote $CONAN_REMOTE --isolate-conan-user-home build-and-test --use-tanker=deployed --tanker-ref=$SDK_NATIVE_LATEST_CONAN_REFERENCE
    - echo $CI_COMMIT_REF_NAME > branch_name.txt
  artifacts:
    paths:
      - pod
      - branch_name.txt

.check/native-from-sources:
  stage: check
  extends:
    - .rules/native-from-sources
  script:
    - poetry run python run-ci.py --remote $CONAN_REMOTE --isolate-conan-user-home build-and-test --use-tanker=same-as-branch
    - echo $CI_COMMIT_REF_NAME > branch_name.txt
  artifacts:
    paths:
      - pod
      - branch_name.txt

.check/downstream:
  stage: check
  extends:
    - .before-script/download-artifacts
    - .rules/check/downstream
  script:
    - poetry run python run-ci.py --remote $CONAN_REMOTE --isolate-conan-user-home build-and-test --use-tanker=upstream
    # branch_name.txt is already in sdk-native's artifacts
  artifacts:
    paths:
      - pod
      - branch_name.txt

###############
# check stage #
###############

check/deployed-native/x86_64:
  extends:
    - .tags/macos/x86_64
    - .check/deployed-native

check/deployed-native/arm:
  extends:
    - .tags/macos/arm
    - .check/deployed-native

check/native-from-sources/x86_64:
  extends:
    - .tags/macos/x86_64
    - .check/native-from-sources

check/native-from-sources/arm:
  extends:
    - .tags/macos/arm
    - .check/native-from-sources

check/downstream/x86_64:
  extends:
    - .tags/macos/x86_64
    - .check/downstream

check/downstream/arm:
  extends:
    - .tags/macos/arm
    - .check/downstream

######################
# bridge-check stage #
######################

bridge/native-from-sources/x86_64:
  stage: bridge-check
  extends:
    - .rules/native-from-sources
    - .variables/bridge-common
  needs:
    - check/native-from-sources/x86_64
  variables:
    UPSTREAM_JOB_NAME: check/native-from-sources/x86_64
    UPSTREAM_JOB_TARGET: ios-x86_64
  trigger:
    project: TankerHQ/sdk-react-native
    strategy: depend

bridge/native-from-sources/arm:
  stage: bridge-check
  extends:
    - .rules/native-from-sources
    - .variables/bridge-common
  needs:
    - check/native-from-sources/arm
  variables:
    UPSTREAM_JOB_NAME: check/native-from-sources/arm
    UPSTREAM_JOB_TARGET: ios-arm
  trigger:
    project: TankerHQ/sdk-react-native
    strategy: depend

bridge/compat-from-sources/arm:
  stage: bridge-check
  extends:
    - .variables/bridge-common
    - .rules/native-from-sources
  needs:
    - check/native-from-sources/arm
  variables:
    UPSTREAM_JOB_NAME: check/native-from-sources/arm
    UPSTREAM_JOB_TARGET: ios-arm
  trigger:
    project: TankerHQ/compatibility-tests
    strategy: depend

bridge/compat-downstream/arm:
  stage: bridge-check
  extends:
    - .variables/bridge-common
  rules:
    - if: !reference [.if-upstream-ci-pipeline, if]
  needs:
    - check/downstream/arm
  variables:
    UPSTREAM_JOB_NAME: check/downstream/arm
    UPSTREAM_JOB_TARGET: ios-arm
  trigger:
    project: TankerHQ/compatibility-tests
    strategy: depend

bridge/compat-deployed/arm:
  stage: bridge-check
  extends:
    - .variables/bridge-common
  rules:
    # only run during standalone SDK releases
    - if: !reference [.if-invalid-ios-release-version, if]
      when: never
    - !reference [.rules/web/auto, rules]
  needs:
    - check/deployed-native/arm
  variables:
    SDK_NATIVE_LATEST_CONAN_REFERENCE: $SDK_NATIVE_LATEST_CONAN_REFERENCE
    UPSTREAM_JOB_NAME: check/deployed-native/arm
    UPSTREAM_JOB_TARGET: ios-arm
  trigger:
    project: TankerHQ/compatibility-tests
    strategy: depend

.rules/bridge/deployed-native:
  rules: !reference [.rules/check/deployed-native, rules]

bridge/deployed-native/x86_64:
  stage: bridge-check
  extends:
    - .rules/bridge/deployed-native
    - .variables/bridge-common
  needs:
    - check/deployed-native/x86_64
  variables:
    UPSTREAM_JOB_NAME: check/deployed-native/x86_64
    UPSTREAM_JOB_TARGET: ios-x86_64
  trigger:
    project: TankerHQ/sdk-react-native
    strategy: depend

bridge/deployed-native/arm:
  stage: bridge-check
  extends:
    - .rules/bridge/deployed-native
    - .variables/bridge-common
  needs:
    - check/deployed-native/arm
  variables:
    UPSTREAM_JOB_NAME: check/deployed-native/arm
    UPSTREAM_JOB_TARGET: ios-arm
  trigger:
    project: TankerHQ/sdk-react-native
    strategy: depend

bridge/downstream/x86_64:
  stage: bridge-check
  extends:
    - .rules/check/downstream
    - .variables/bridge-common
  needs:
    - check/downstream/x86_64
  variables:
    UPSTREAM_JOB_NAME: check/downstream/x86_64
    UPSTREAM_JOB_TARGET: ios-x86_64
  trigger:
    project: TankerHQ/sdk-react-native
    strategy: depend

bridge/downstream/arm:
  stage: bridge-check
  extends:
    - .rules/check/downstream
    - .variables/bridge-common
  needs:
    - check/downstream/arm
  variables:
    UPSTREAM_JOB_NAME: check/downstream/arm
    UPSTREAM_JOB_TARGET: ios-arm
  trigger:
    project: TankerHQ/sdk-react-native
    strategy: depend

################
# deploy stage #
################

deploy:
  stage: deploy
  extends:
    - .tags/macos/x86_64
    - .rules/deploy/ios
  script:
    - poetry run python run-ci.py reset-branch $UPSTREAM_BRANCH_NAME
    - poetry run python run-ci.py --remote $CONAN_REMOTE --isolate-conan-user-home deploy --version $SDK_IOS_RELEASE_VERSION --tanker-ref $SDK_NATIVE_LATEST_CONAN_REFERENCE
  release:
    description: sdk-ios v$SDK_IOS_RELEASE_VERSION
    tag_name: v$SDK_IOS_RELEASE_VERSION

brige/bump-ios-compat-tests:
  stage: deploy
  extends:
    - .variables/bridge-common
  rules:
    - if: !reference [.if-invalid-ios-release-version, if]
      when: never
    - if: !reference [.if-web-pipeline, if]
      when: manual
    - if: !reference [.if-upstream-release-deploy-stage, if]
      when: manual
  needs: [deploy]
  variables:
    SDK_IOS_RELEASE_VERSION: $SDK_IOS_RELEASE_VERSION
    SDK_NATIVE_LATEST_CONAN_REFERENCE: $SDK_NATIVE_LATEST_CONAN_REFERENCE
    UPSTREAM_JOB_NAME: deploy
    UPSTREAM_JOB_TARGET: ios-arm
  trigger:
    project: TankerHQ/compatibility-tests
    strategy: depend
  allow_failure: true
