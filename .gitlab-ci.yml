variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - check
  - deploy

before_script:
    - security unlock-keychain -p ${DEFAULT_KEYCHAIN_PASSWORD} ~/Library/Keychains/login.keychain-db
    - poetry install

workflow:
  rules:
    # web pipelines for releases
    - if: $CI_PIPELINE_SOURCE == "web" && ($SDK_IOS_RELEASE_VERSION != null && $SDK_IOS_RELEASE_VERSION !~ /\A[0-9.]+(-[a-z]+[0-9]+)?\z/)
      when: never
    # downstream pipelines for releases (also allow regular CI downstream pipelines)
    - if: $CI_PIPELINE_SOURCE == "pipeline" && ($SDK_IOS_RELEASE_VERSION != null && $SDK_IOS_RELEASE_VERSION !~ /\A[0-9.]+(-[a-z]+[0-9]+)?\z/)
      when: never
    # allow everything else
    - when: always

check/deployed-native:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    # We can tag an alpha/beta version on a commit that is part of a MR
    # This will trigger two pipelines, one linked to the MR, the job will be manual
    # The other pipeline will run check/deployed-native automatically, and will also create the deploy job
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
  artifacts:
    paths:
      - Tanker/Headers/ctanker
      - Tanker/Headers/ctanker.h
      - Tanker/Libraries
      - Tanker/Tanker.podspec
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=deployed
  tags:
    - macos

check/native-from-sources:
  stage: check
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true
    - if: $CI_MERGE_REQUEST_ID == null && $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /\Afeat\/.+\z/)
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=same-as-branch --only-macos-archs
  tags:
    - macos

check/downstream:
  stage: check
  tags:
    - macos
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline" && $SDK_IOS_RELEASE_VERSION == null
  script:
    - poetry run python run-ci.py reset-branch $UPSTREAM_BRANCH_NAME
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=upstream --only-macos-archs

check/downstream/release:
  stage: check
  tags:
    - macos
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline" && $SDK_IOS_RELEASE_VERSION
  script:
    - poetry run python run-ci.py reset-branch $UPSTREAM_BRANCH_NAME
    - poetry run python run-ci.py download-artifacts --project-id=$UPSTREAM_PROJECT_ID --pipeline-id=$UPSTREAM_PIPELINE_ID --job-name=$UPSTREAM_JOB_NAME
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=upstream
  artifacts:
    paths:
      - Tanker/Headers/ctanker
      - Tanker/Headers/ctanker.h
      - Tanker/Libraries
      - Tanker/Tanker.podspec

nightly:
  stage: check
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --use-tanker=same-as-branch
  tags:
    - macos

deploy:
  stage: deploy
  rules:
    # version env var already filtered by workflow rules
    - if: $SDK_IOS_RELEASE_VERSION && ($CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "pipeline")
      when: manual
  script:
    - GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gitlab.json poetry run python run-ci.py --isolate-conan-user-home deploy --git-tag v${SDK_IOS_RELEASE_VERSION}
  tags:
    - macos

mirror:
  tags:
    - macos
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE != "push"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /\Av[0-9.]+\z/
    - if: $CI_COMMIT_REF_NAME =~ /\Arelease\/.*\z/
    - if: $CI_COMMIT_REF_NAME =~ /\Afeat\/.+\z/
    - if: $CI_COMMIT_REF_NAME == "master"
  script:
    - poetry run python run-ci.py mirror
